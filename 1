#include <iostream>
#include <memory>

template<class T>
struct Node {
    T data;
    std::unique_ptr<Node<T>> next;

    Node(const T& value) : data(value), next(nullptr) {}
};

template<class T>
class List {
    std::unique_ptr<Node<T>> head;

public:
    void push_front(const T& value) {
        auto new_node = std::make_unique<Node<T>>(value);
        if (!head) {
            head = std::move(new_node);
        }
        else {
            new_node->next = std::move(head);
            head = std::move(new_node);
        }
    }

    void push_back(const T& value) {
        auto new_node = std::make_unique<Node<T>>(value);
        if (!head) {
            head = std::move(new_node);
        }
        else {
            Node<T>* current = head.get();
            while (current->next) {
                current = current->next.get();
            }
            current->next = std::move(new_node);
        }
    }

    void pop_front(const T& value) {
        if (!head) return; // Если список пуст

        
        if (head->data == value) {
            head = std::move(head->next);
            return;
        }

        Node<T>* current = head.get();
        while (current->next) {
            if (current->next->data == value) {
                current->next = std::move(current->next->next);
                return;
            }
            current = current->next.get();
        }
    }

    void pop_back() {
        if (!head) return; 

        
        if (!head->next) {
            head.reset();
            return;
        }

        Node<T>* current = head.get();
        while (current->next && current->next->next) {
            current = current->next.get();
        }
        current->next.reset(); 
    }
    Node<T>* find(const T& value) {
        Node<T>* current = head.get();
        while (current) {
            if (current->data == value) {
                return current;
            }
            current = current->next.get();
        }
        return nullptr; 
    }
    void remove(const T& value) {
        if (!head) return;

        Node<T>* prev = nullptr;
        Node<T>* current = head.get();
        while (current) {
            if (current->data == value) {
                if (prev) {
                    prev->next = std::move(current->next);
                }
                else {
                    head = std::move(current->next);
                }
                return;
            }
            prev = current;
            current = current->next.get();
        }
    }
    bool is_empty() const {
        return !head;
    }
    int size() const {
        int count = 0;
        Node<T>* current = head.get();
        while (current) {
            count++;
            current = current->next.get();
        }
        return count;
    }
    void print() {
        Node<T>* current = head.get();
        while (current) {
            std::cout << current->data << std::endl;
            current = current->next.get();
        }
    }
};

int main() {
    List<int> myList;
    myList.push_front(1);
    myList.push_back(2);
    myList.push_back(3);
    std::cout << "Initial list:" << std::endl;
    myList.print();

    myList.pop_front(2);
    std::cout << "After removing 2:" << std::endl;
    myList.print();
    myList.remove(2);
    std::cout << "After removing 2:" << std::endl;
    myList.print();

    myList.remove(1);
    std::cout << "After removing element with value 1:" << std::endl;
    myList.pop_front(2);
    std::cout << "After removing last element:" << std::endl;
    myList.print();
    myList.size();

    
}
